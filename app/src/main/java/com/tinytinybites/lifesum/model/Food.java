package com.tinytinybites.lifesum.model;

import com.tinytinybites.lifesum.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "FOOD".
 */
public class Food implements java.io.Serializable {

    private Long id;
    private String title;
    private String category;
    private Double gramsperserving;
    private Integer calories;
    private Integer measurementid;
    private Integer typeofmeasurement;
    private Integer showmeasurement;
    private Double protein;
    private Double carbohydrates;
    private Double fiber;
    private Double sugar;
    private Double fat;
    private Double saturatedfat;
    private Double unsaturatedfat;
    private Double cholesterol;
    private Double sodium;
    private Double potassium;
    private String pcstext;
    private Long servingcategory;
    private Long defaultserving;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FoodDao myDao;

    private ServingCategory servingCategory;
    private Long servingCategory__resolvedKey;

    private ServingSize servingSize;
    private Long servingSize__resolvedKey;


    public Food() {
    }

    public Food(Long id) {
        this.id = id;
    }

    public Food(Long id, String title, String category, Double gramsperserving, Integer calories, Integer measurementid, Integer typeofmeasurement, Integer showmeasurement, Double protein, Double carbohydrates, Double fiber, Double sugar, Double fat, Double saturatedfat, Double unsaturatedfat, Double cholesterol, Double sodium, Double potassium, String pcstext, Long servingcategory, Long defaultserving) {
        this.id = id;
        this.title = title;
        this.category = category;
        this.gramsperserving = gramsperserving;
        this.calories = calories;
        this.measurementid = measurementid;
        this.typeofmeasurement = typeofmeasurement;
        this.showmeasurement = showmeasurement;
        this.protein = protein;
        this.carbohydrates = carbohydrates;
        this.fiber = fiber;
        this.sugar = sugar;
        this.fat = fat;
        this.saturatedfat = saturatedfat;
        this.unsaturatedfat = unsaturatedfat;
        this.cholesterol = cholesterol;
        this.sodium = sodium;
        this.potassium = potassium;
        this.pcstext = pcstext;
        this.servingcategory = servingcategory;
        this.defaultserving = defaultserving;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFoodDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public Double getGramsperserving() {
        return gramsperserving;
    }

    public void setGramsperserving(Double gramsperserving) {
        this.gramsperserving = gramsperserving;
    }

    public Integer getCalories() {
        return calories;
    }

    public void setCalories(Integer calories) {
        this.calories = calories;
    }

    public Integer getMeasurementid() {
        return measurementid;
    }

    public void setMeasurementid(Integer measurementid) {
        this.measurementid = measurementid;
    }

    public Integer getTypeofmeasurement() {
        return typeofmeasurement;
    }

    public void setTypeofmeasurement(Integer typeofmeasurement) {
        this.typeofmeasurement = typeofmeasurement;
    }

    public Integer getShowmeasurement() {
        return showmeasurement;
    }

    public void setShowmeasurement(Integer showmeasurement) {
        this.showmeasurement = showmeasurement;
    }

    public Double getProtein() {
        return protein;
    }

    public void setProtein(Double protein) {
        this.protein = protein;
    }

    public Double getCarbohydrates() {
        return carbohydrates;
    }

    public void setCarbohydrates(Double carbohydrates) {
        this.carbohydrates = carbohydrates;
    }

    public Double getFiber() {
        return fiber;
    }

    public void setFiber(Double fiber) {
        this.fiber = fiber;
    }

    public Double getSugar() {
        return sugar;
    }

    public void setSugar(Double sugar) {
        this.sugar = sugar;
    }

    public Double getFat() {
        return fat;
    }

    public void setFat(Double fat) {
        this.fat = fat;
    }

    public Double getSaturatedfat() {
        return saturatedfat;
    }

    public void setSaturatedfat(Double saturatedfat) {
        this.saturatedfat = saturatedfat;
    }

    public Double getUnsaturatedfat() {
        return unsaturatedfat;
    }

    public void setUnsaturatedfat(Double unsaturatedfat) {
        this.unsaturatedfat = unsaturatedfat;
    }

    public Double getCholesterol() {
        return cholesterol;
    }

    public void setCholesterol(Double cholesterol) {
        this.cholesterol = cholesterol;
    }

    public Double getSodium() {
        return sodium;
    }

    public void setSodium(Double sodium) {
        this.sodium = sodium;
    }

    public Double getPotassium() {
        return potassium;
    }

    public void setPotassium(Double potassium) {
        this.potassium = potassium;
    }

    public String getPcstext() {
        return pcstext;
    }

    public void setPcstext(String pcstext) {
        this.pcstext = pcstext;
    }

    public Long getServingcategory() {
        return servingcategory;
    }

    public void setServingcategory(Long servingcategory) {
        this.servingcategory = servingcategory;
    }

    public Long getDefaultserving() {
        return defaultserving;
    }

    public void setDefaultserving(Long defaultserving) {
        this.defaultserving = defaultserving;
    }

    /** To-one relationship, resolved on first access. */
    public ServingCategory getServingCategory() {
        Long __key = this.servingcategory;
        if (servingCategory__resolvedKey == null || !servingCategory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ServingCategoryDao targetDao = daoSession.getServingCategoryDao();
            ServingCategory servingCategoryNew = targetDao.load(__key);
            synchronized (this) {
                servingCategory = servingCategoryNew;
            	servingCategory__resolvedKey = __key;
            }
        }
        return servingCategory;
    }

    public void setServingCategory(ServingCategory servingCategory) {
        synchronized (this) {
            this.servingCategory = servingCategory;
            servingcategory = servingCategory == null ? null : servingCategory.getOid();
            servingCategory__resolvedKey = servingcategory;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ServingSize getServingSize() {
        Long __key = this.defaultserving;
        if (servingSize__resolvedKey == null || !servingSize__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ServingSizeDao targetDao = daoSession.getServingSizeDao();
            ServingSize servingSizeNew = targetDao.load(__key);
            synchronized (this) {
                servingSize = servingSizeNew;
            	servingSize__resolvedKey = __key;
            }
        }
        return servingSize;
    }

    public void setServingSize(ServingSize servingSize) {
        synchronized (this) {
            this.servingSize = servingSize;
            defaultserving = servingSize == null ? null : servingSize.getOid();
            servingSize__resolvedKey = defaultserving;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
