package com.tinytinybites.lifesum.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tinytinybites.lifesum.model.Food;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOD".
*/
public class FoodDao extends AbstractDao<Food, Long> {

    public static final String TABLENAME = "FOOD";

    /**
     * Properties of entity Food.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Category = new Property(2, String.class, "category", false, "CATEGORY");
        public final static Property Gramsperserving = new Property(3, Double.class, "gramsperserving", false, "GRAMSPERSERVING");
        public final static Property Calories = new Property(4, Integer.class, "calories", false, "CALORIES");
        public final static Property Measurementid = new Property(5, Integer.class, "measurementid", false, "MEASUREMENTID");
        public final static Property Typeofmeasurement = new Property(6, Integer.class, "typeofmeasurement", false, "TYPEOFMEASUREMENT");
        public final static Property Showmeasurement = new Property(7, Integer.class, "showmeasurement", false, "SHOWMEASUREMENT");
        public final static Property Protein = new Property(8, Double.class, "protein", false, "PROTEIN");
        public final static Property Carbohydrates = new Property(9, Double.class, "carbohydrates", false, "CARBOHYDRATES");
        public final static Property Fiber = new Property(10, Double.class, "fiber", false, "FIBER");
        public final static Property Sugar = new Property(11, Double.class, "sugar", false, "SUGAR");
        public final static Property Fat = new Property(12, Double.class, "fat", false, "FAT");
        public final static Property Saturatedfat = new Property(13, Double.class, "saturatedfat", false, "SATURATEDFAT");
        public final static Property Unsaturatedfat = new Property(14, Double.class, "unsaturatedfat", false, "UNSATURATEDFAT");
        public final static Property Cholesterol = new Property(15, Double.class, "cholesterol", false, "CHOLESTEROL");
        public final static Property Sodium = new Property(16, Double.class, "sodium", false, "SODIUM");
        public final static Property Potassium = new Property(17, Double.class, "potassium", false, "POTASSIUM");
        public final static Property Pcstext = new Property(18, String.class, "pcstext", false, "PCSTEXT");
        public final static Property Servingcategory = new Property(19, Long.class, "servingcategory", false, "SERVINGCATEGORY");
        public final static Property Defaultserving = new Property(20, Long.class, "defaultserving", false, "DEFAULTSERVING");
    };

    private DaoSession daoSession;


    public FoodDao(DaoConfig config) {
        super(config);
    }
    
    public FoodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CATEGORY\" TEXT," + // 2: category
                "\"GRAMSPERSERVING\" REAL," + // 3: gramsperserving
                "\"CALORIES\" INTEGER," + // 4: calories
                "\"MEASUREMENTID\" INTEGER," + // 5: measurementid
                "\"TYPEOFMEASUREMENT\" INTEGER," + // 6: typeofmeasurement
                "\"SHOWMEASUREMENT\" INTEGER," + // 7: showmeasurement
                "\"PROTEIN\" REAL," + // 8: protein
                "\"CARBOHYDRATES\" REAL," + // 9: carbohydrates
                "\"FIBER\" REAL," + // 10: fiber
                "\"SUGAR\" REAL," + // 11: sugar
                "\"FAT\" REAL," + // 12: fat
                "\"SATURATEDFAT\" REAL," + // 13: saturatedfat
                "\"UNSATURATEDFAT\" REAL," + // 14: unsaturatedfat
                "\"CHOLESTEROL\" REAL," + // 15: cholesterol
                "\"SODIUM\" REAL," + // 16: sodium
                "\"POTASSIUM\" REAL," + // 17: potassium
                "\"PCSTEXT\" TEXT," + // 18: pcstext
                "\"SERVINGCATEGORY\" INTEGER," + // 19: servingcategory
                "\"DEFAULTSERVING\" INTEGER);"); // 20: defaultserving
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Food entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(3, category);
        }
 
        Double gramsperserving = entity.getGramsperserving();
        if (gramsperserving != null) {
            stmt.bindDouble(4, gramsperserving);
        }
 
        Integer calories = entity.getCalories();
        if (calories != null) {
            stmt.bindLong(5, calories);
        }
 
        Integer measurementid = entity.getMeasurementid();
        if (measurementid != null) {
            stmt.bindLong(6, measurementid);
        }
 
        Integer typeofmeasurement = entity.getTypeofmeasurement();
        if (typeofmeasurement != null) {
            stmt.bindLong(7, typeofmeasurement);
        }
 
        Integer showmeasurement = entity.getShowmeasurement();
        if (showmeasurement != null) {
            stmt.bindLong(8, showmeasurement);
        }
 
        Double protein = entity.getProtein();
        if (protein != null) {
            stmt.bindDouble(9, protein);
        }
 
        Double carbohydrates = entity.getCarbohydrates();
        if (carbohydrates != null) {
            stmt.bindDouble(10, carbohydrates);
        }
 
        Double fiber = entity.getFiber();
        if (fiber != null) {
            stmt.bindDouble(11, fiber);
        }
 
        Double sugar = entity.getSugar();
        if (sugar != null) {
            stmt.bindDouble(12, sugar);
        }
 
        Double fat = entity.getFat();
        if (fat != null) {
            stmt.bindDouble(13, fat);
        }
 
        Double saturatedfat = entity.getSaturatedfat();
        if (saturatedfat != null) {
            stmt.bindDouble(14, saturatedfat);
        }
 
        Double unsaturatedfat = entity.getUnsaturatedfat();
        if (unsaturatedfat != null) {
            stmt.bindDouble(15, unsaturatedfat);
        }
 
        Double cholesterol = entity.getCholesterol();
        if (cholesterol != null) {
            stmt.bindDouble(16, cholesterol);
        }
 
        Double sodium = entity.getSodium();
        if (sodium != null) {
            stmt.bindDouble(17, sodium);
        }
 
        Double potassium = entity.getPotassium();
        if (potassium != null) {
            stmt.bindDouble(18, potassium);
        }
 
        String pcstext = entity.getPcstext();
        if (pcstext != null) {
            stmt.bindString(19, pcstext);
        }
 
        Long servingcategory = entity.getServingcategory();
        if (servingcategory != null) {
            stmt.bindLong(20, servingcategory);
        }
 
        Long defaultserving = entity.getDefaultserving();
        if (defaultserving != null) {
            stmt.bindLong(21, defaultserving);
        }
    }

    @Override
    protected void attachEntity(Food entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Food readEntity(Cursor cursor, int offset) {
        Food entity = new Food( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // category
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // gramsperserving
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // calories
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // measurementid
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // typeofmeasurement
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // showmeasurement
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // protein
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // carbohydrates
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // fiber
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // sugar
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // fat
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // saturatedfat
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // unsaturatedfat
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // cholesterol
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // sodium
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // potassium
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // pcstext
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // servingcategory
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20) // defaultserving
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Food entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategory(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGramsperserving(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCalories(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMeasurementid(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTypeofmeasurement(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setShowmeasurement(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setProtein(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setCarbohydrates(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setFiber(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setSugar(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setFat(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setSaturatedfat(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setUnsaturatedfat(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setCholesterol(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setSodium(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setPotassium(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setPcstext(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setServingcategory(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setDefaultserving(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Food entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Food entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getServingCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getServingSizeDao().getAllColumns());
            builder.append(" FROM FOOD T");
            builder.append(" LEFT JOIN SERVING_CATEGORY T0 ON T.\"SERVINGCATEGORY\"=T0.\"OID\"");
            builder.append(" LEFT JOIN SERVING_SIZE T1 ON T.\"DEFAULTSERVING\"=T1.\"OID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Food loadCurrentDeep(Cursor cursor, boolean lock) {
        Food entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ServingCategory servingCategory = loadCurrentOther(daoSession.getServingCategoryDao(), cursor, offset);
        entity.setServingCategory(servingCategory);
        offset += daoSession.getServingCategoryDao().getAllColumns().length;

        ServingSize servingSize = loadCurrentOther(daoSession.getServingSizeDao(), cursor, offset);
        entity.setServingSize(servingSize);

        return entity;    
    }

    public Food loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Food> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Food> list = new ArrayList<Food>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Food> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Food> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
