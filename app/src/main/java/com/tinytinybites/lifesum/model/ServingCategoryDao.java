package com.tinytinybites.lifesum.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tinytinybites.lifesum.model.ServingCategory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERVING_CATEGORY".
*/
public class ServingCategoryDao extends AbstractDao<ServingCategory, Long> {

    public static final String TABLENAME = "SERVING_CATEGORY";

    /**
     * Properties of entity ServingCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Oid = new Property(0, Long.class, "oid", true, "OID");
        public final static Property Usemedian = new Property(1, Integer.class, "usemedian", false, "USEMEDIAN");
        public final static Property Linearsize = new Property(2, Integer.class, "linearsize", false, "LINEARSIZE");
        public final static Property Lastupdated = new Property(3, Long.class, "lastupdated", false, "LASTUPDATED");
        public final static Property Created = new Property(4, Long.class, "created", false, "CREATED");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Defaultsize = new Property(6, Integer.class, "defaultsize", false, "DEFAULTSIZE");
        public final static Property Source = new Property(7, String.class, "source", false, "SOURCE");
    };


    public ServingCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public ServingCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERVING_CATEGORY\" (" + //
                "\"OID\" INTEGER PRIMARY KEY ," + // 0: oid
                "\"USEMEDIAN\" INTEGER," + // 1: usemedian
                "\"LINEARSIZE\" INTEGER," + // 2: linearsize
                "\"LASTUPDATED\" INTEGER," + // 3: lastupdated
                "\"CREATED\" INTEGER," + // 4: created
                "\"NAME\" TEXT," + // 5: name
                "\"DEFAULTSIZE\" INTEGER," + // 6: defaultsize
                "\"SOURCE\" TEXT);"); // 7: source
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVING_CATEGORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ServingCategory entity) {
        stmt.clearBindings();
 
        Long oid = entity.getOid();
        if (oid != null) {
            stmt.bindLong(1, oid);
        }
 
        Integer usemedian = entity.getUsemedian();
        if (usemedian != null) {
            stmt.bindLong(2, usemedian);
        }
 
        Integer linearsize = entity.getLinearsize();
        if (linearsize != null) {
            stmt.bindLong(3, linearsize);
        }
 
        Long lastupdated = entity.getLastupdated();
        if (lastupdated != null) {
            stmt.bindLong(4, lastupdated);
        }
 
        Long created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(5, created);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        Integer defaultsize = entity.getDefaultsize();
        if (defaultsize != null) {
            stmt.bindLong(7, defaultsize);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ServingCategory readEntity(Cursor cursor, int offset) {
        ServingCategory entity = new ServingCategory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // oid
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // usemedian
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // linearsize
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // lastupdated
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // created
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // defaultsize
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // source
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ServingCategory entity, int offset) {
        entity.setOid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsemedian(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLinearsize(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLastupdated(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCreated(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDefaultsize(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSource(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ServingCategory entity, long rowId) {
        entity.setOid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ServingCategory entity) {
        if(entity != null) {
            return entity.getOid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
