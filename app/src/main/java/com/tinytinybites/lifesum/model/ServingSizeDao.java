package com.tinytinybites.lifesum.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tinytinybites.lifesum.model.ServingSize;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERVING_SIZE".
*/
public class ServingSizeDao extends AbstractDao<ServingSize, Long> {

    public static final String TABLENAME = "SERVING_SIZE";

    /**
     * Properties of entity ServingSize.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Oid = new Property(0, Long.class, "oid", true, "OID");
        public final static Property Lastupdated = new Property(1, Long.class, "lastupdated", false, "LASTUPDATED");
        public final static Property Created = new Property(2, Long.class, "created", false, "CREATED");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Proportion = new Property(4, Double.class, "proportion", false, "PROPORTION");
        public final static Property Source = new Property(5, String.class, "source", false, "SOURCE");
        public final static Property Servingcategory = new Property(6, Long.class, "servingcategory", false, "SERVINGCATEGORY");
    };

    private DaoSession daoSession;


    public ServingSizeDao(DaoConfig config) {
        super(config);
    }
    
    public ServingSizeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERVING_SIZE\" (" + //
                "\"OID\" INTEGER PRIMARY KEY ," + // 0: oid
                "\"LASTUPDATED\" INTEGER," + // 1: lastupdated
                "\"CREATED\" INTEGER," + // 2: created
                "\"NAME\" TEXT," + // 3: name
                "\"PROPORTION\" REAL," + // 4: proportion
                "\"SOURCE\" TEXT," + // 5: source
                "\"SERVINGCATEGORY\" INTEGER);"); // 6: servingcategory
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVING_SIZE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ServingSize entity) {
        stmt.clearBindings();
 
        Long oid = entity.getOid();
        if (oid != null) {
            stmt.bindLong(1, oid);
        }
 
        Long lastupdated = entity.getLastupdated();
        if (lastupdated != null) {
            stmt.bindLong(2, lastupdated);
        }
 
        Long created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(3, created);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Double proportion = entity.getProportion();
        if (proportion != null) {
            stmt.bindDouble(5, proportion);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        Long servingcategory = entity.getServingcategory();
        if (servingcategory != null) {
            stmt.bindLong(7, servingcategory);
        }
    }

    @Override
    protected void attachEntity(ServingSize entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ServingSize readEntity(Cursor cursor, int offset) {
        ServingSize entity = new ServingSize( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // oid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // lastupdated
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // created
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // proportion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // source
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // servingcategory
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ServingSize entity, int offset) {
        entity.setOid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLastupdated(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCreated(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProportion(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setSource(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setServingcategory(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ServingSize entity, long rowId) {
        entity.setOid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ServingSize entity) {
        if(entity != null) {
            return entity.getOid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getServingCategoryDao().getAllColumns());
            builder.append(" FROM SERVING_SIZE T");
            builder.append(" LEFT JOIN SERVING_CATEGORY T0 ON T.\"SERVINGCATEGORY\"=T0.\"OID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ServingSize loadCurrentDeep(Cursor cursor, boolean lock) {
        ServingSize entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ServingCategory servingCategory = loadCurrentOther(daoSession.getServingCategoryDao(), cursor, offset);
        entity.setServingCategory(servingCategory);

        return entity;    
    }

    public ServingSize loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ServingSize> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ServingSize> list = new ArrayList<ServingSize>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ServingSize> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ServingSize> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
